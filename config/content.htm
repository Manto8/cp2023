<h1><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">關於</span></span></h1>
<p><a href="https://github.com/mdecycu/cmsite"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://github.com/mdecycu/cmsite</span></span></a></p>
<h1><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">W2</span></span></strong></h1>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EflMzDYwTjdIm2KJB7SCYkwB1_6UTQ4mzUdDx-bwN22E8A?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=ZN0EPP">說明安裝 Apps, 如何設定網路, 查驗是否正確連網</a></span></span></strong></p>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Ef4xqA-zGsxFlnrsIq1WhRQBt7HalMhjXLb5hzLRmprYOQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=a7Oaxo">說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話</a></span></span></strong></p>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZ97ogpobtpCv2BxYJfDGjEBgadG6gPZJYN5TbB7clrMtA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=PcbKn5">說明如何利用 Replit 協助編輯網頁內容</a></span></span></strong></p>
<p><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EW-FcfDAaMZPjdA8nFjgCHEBpp8yPr7wSoi9RsxmyLbZpA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=E1T3vG">說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站</a></span></span></strong></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p>
<h1><strong><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">W3</span></span></strong></h1>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EbXrVO6Jeb5Gnn47Dvpv7pYBftMz4z9evscZ-Spxxmk7mw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=RiZ5wB">有關電腦輔助設計室網路設定說明</a></span></span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Eb1u9lGQSotOpxiJTQeFVwEBq-FxJEDTnTkuUL0jlGdnFQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=zcA6Qt">處理 .replit 與 replit.nix 中的舊 Python 設定問題</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUVPlEOxYxdCkQyT9rX-B64BK_SNHRJaz52HloupubxlMw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=W03gHn">說明如何為 site-個人github帳號 倉儲設定 Github Pages</a></p>
<h1><strong>W4</strong></h1>
<p><span>各學員自行建立線上考試帳號</span></p>
<p><span>依據<span> </span><a href="https://qry.nfu.edu.tw/teacher.php?selyr=1121&amp;teacher=%E5%9A%B4%E5%AE%B6%E9%8A%98">112 學年度第一學期教師授課表</a>中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號.</span></p>
<p><span>各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages</span></p>
<p>登入 Github 後, 以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 Template 建立 cp2023 倉儲</p>
<p><span>在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github</span></p>
<p>在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號</p>
<p>利用 import 將 cp2023 倉儲導入 Replit</p>
<p>設定 .replit 為 python3 main.py</p>
<p>根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install</p>
<p>以 Run 執行 main.py 啟動倉儲內容編輯網頁</p>
<p>利用<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">密碼產生程式</a>將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證)</p>
<p>重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github</p>
<p><span>在 Replit cp2023 專案中設定 C 程式與 Gnuplot 執行環境, 完成<a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容中的練習</a></span></p>
<p>replit.nix<span> </span><a href="https://mde.tw/cpnote/content/w2-w5.html">納入 gnuplot 套件</a></p>
<p><span><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZYZvhkOEnxFrCnVI_VuvpYBIqzEWtPCWnyvqhrRqC_TgQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=1axakq">w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4</a></span></p>
<p><span>設定過程使用的參考網站: <a href="https://scrum-1.github.io/cp2023/content/w5.html">https://scrum-1.github.io/cp2023/content/w5.html</a> </span></p>
<p><span>設定過程使用的 Repl:<span> </span><a href="https://replit.com/@scrum1/cp2023">https://replit.com/@scrum1/cp2023</a> (包含<span> </span><a href="https://replit.com/@scrum1/cp2023#replit.nix">replit.nix</a><span> </span>設定檔案)</span></p>
<p><span>蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler's Method 數值分析相關資料</span></p>
<p>將<span> </span><a href="https://mde.tw/cpnote/content/MSD.html">euler_gnuplot_msd_ex1.c</a><span> 放入 downloads 目錄中, 以 cc euler_gnuplot_msd_ex1.c -o euler_gnuplot_msd_ex1 產生 euler_gnuplot_msd_ex1 可執行檔案後, 以 ./euler_gnuplot_msd_ex1 執行</span></p>
<p><span>最後可以在 images 目錄中得到<span> </span><a href="https://mde.tw/cpnote/images/motion_plot.png">motion_plot.png</a><span> </span>模擬結果</span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a><span> </span>(需要下載密碼)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)</p>
<p><span>改由學員自行利用 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 倉儲作為 template, 建立名稱為 cp2023 的評分倉儲</span>.</p>
<p>近端執行:</p>
<p>SciTE 與 Tiny C Compiler 若要設定為 Tools - Compile 之後產生可執行檔案 a.out, cpp.properties 設定檔案必須修改如下:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_36224">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">ccopts=-pedantic -Os</code></div>
<div class="line number2 index1 alt1"><code class="js preprocessor">#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o</code></div>
<div class="line number3 index2 alt2"><code class="js preprocessor">#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o</code></div>
<div class="line number4 index3 alt1"><code class="js plain">cc=tcc.exe -run </code></div>
<div class="line number5 index4 alt2"><code class="js plain">ccc=tcc.exe -o a.out</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="js plain">make.command=make</code></div>
<div class="line number8 index7 alt1"><code class="js preprocessor">#command.compile.*.c=$(ccc) -std=c99</code></div>
<div class="line number9 index8 alt2"><code class="js plain">command.compile.*.c=$(ccc) $(FileNameExt)</code></div>
<div class="line number10 index9 alt1"><code class="js plain">command.build.*.c=$(make.command)</code></div>
<div class="line number11 index10 alt2"><code class="js plain">command.build.*.h=$(make.command)</code></div>
<div class="line number12 index11 alt1"><code class="js plain">command.clean.*.c=$(make.command) clean</code></div>
<div class="line number13 index12 alt2"><code class="js plain">command.clean.*.h=$(make.command) clean</code></div>
<div class="line number14 index13 alt1"><code class="js preprocessor"># use tcc to run .c program</code></div>
<div class="line number15 index14 alt2"><code class="js preprocessor">#command.go.*.c=./$(FileName)</code></div>
<div class="line number16 index15 alt1"><code class="js plain">command.go.*.c=$(cc) $(FileNameExt)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>雲端執行:</p>
<p>範例:<span> </span><a href="https://replit.com/@wcms/cjavascriptpython">https://replit.com/@wcms/cjavascriptpython</a></p>
<p>將位於個人 Github 帳號下的 cp2023 倉儲 (建議以<span> </span><a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a><span> </span>作為 template) import 進入 Replit, 以 git submodule update --init 取下子模組, 然後以 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝啟動編輯網站所需模組後, 將 config/config 密碼編碼移至 Secrets 頁面中的 config 變數後啟動.</p>
<p>修改 replit.nix 如下, 表示要安裝 gnuplot 套件:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_439830">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">{ pkgs }: {</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">  </code><code class="js plain">deps = [</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">pkgs.gnuplot</code></div>
<div class="line number4 index3 alt1"><code class="js spaces">  </code><code class="js plain">];</code></div>
<div class="line number5 index4 alt2"><code class="js plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>之後將所練習的 C 程式置於 downloads 目錄中, 其執行影像結果存入 images 後, 分別在網頁中引用.</p>
<p>Exercises:</p>
<p>請從 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a><span> </span>(需要下載密碼)與 <a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別:</p>
<ol>
<li>在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行.</li>
<li>在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行.</li>
<li>在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.</li>
</ol>
<p>最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在<span>個人 github 帳號下的 cp2023 倉儲網頁</span>中的 c_ex 頁面中.</p>
<p>參考:</p>
<p>Introduction to the C programming Language (<a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec03.pdf">1</a>,<span> </span><a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec04.pdf">2</a>,<span> </span><a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec05.pdf">3</a>, or<span> </span><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ET9_kFFrXg1DslVFqcV9hRABUcxDKnKsdnPyB6nsQFQKdQ?e=k6DGWl">download with password</a>)</p>
<p>使用者輸入兩個整數後相加的 C 程式範例:</p>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_709659">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp comments">/* Read in two integers , add them and display the answer */</code></div>
<div class="line number2 index1 alt1"><code class="cpp preprocessor">#define _CRT_SECURE_NO_WARNINGS</code></div>
<div class="line number3 index2 alt2"><code class="cpp preprocessor">#include&lt;stdio.h&gt;</code></div>
<div class="line number4 index3 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">main()</code></div>
<div class="line number5 index4 alt2"><code class="cpp plain">{</code></div>
<div class="line number6 index5 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">this_is_a_number1, this_is_a_number2, total;</code></div>
<div class="line number7 index6 alt2"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"Please enter an integer number:\n "</code><code class="cpp plain">);</code></div>
<div class="line number8 index7 alt1"><code class="cpp comments">/* read number in */</code></div>
<div class="line number9 index8 alt2"><code class="cpp keyword bold">if</code> <code class="cpp plain">(</code><code class="cpp functions bold">scanf</code><code class="cpp plain">(</code><code class="cpp string">"%d"</code><code class="cpp plain">, &amp;this_is_a_number1) == 1) {</code></div>
<div class="line number10 index9 alt1"><code class="cpp spaces">      </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d"</code><code class="cpp plain">, this_is_a_number1);</code></div>
<div class="line number11 index10 alt2"><code class="cpp spaces">    </code><code class="cpp plain">} </code><code class="cpp keyword bold">else</code> <code class="cpp plain">{</code></div>
<div class="line number12 index11 alt1"><code class="cpp spaces">        </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"Failed to read integer.\n"</code><code class="cpp plain">);</code></div>
<div class="line number13 index12 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"You entered %d\n"</code><code class="cpp plain">, this_is_a_number1);</code></div>
<div class="line number16 index15 alt1"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"Please enter another number: \n"</code><code class="cpp plain">);</code></div>
<div class="line number17 index16 alt2"><code class="cpp keyword bold">if</code> <code class="cpp plain">(</code><code class="cpp functions bold">scanf</code><code class="cpp plain">(</code><code class="cpp string">"%d"</code><code class="cpp plain">, &amp;this_is_a_number2) == 1) {</code></div>
<div class="line number18 index17 alt1"><code class="cpp spaces">      </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d"</code><code class="cpp plain">, this_is_a_number1);</code></div>
<div class="line number19 index18 alt2"><code class="cpp spaces">    </code><code class="cpp plain">} </code><code class="cpp keyword bold">else</code> <code class="cpp plain">{</code></div>
<div class="line number20 index19 alt1"><code class="cpp spaces">      </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"Failed to read integer.\n"</code><code class="cpp plain">);</code></div>
<div class="line number21 index20 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number22 index21 alt1"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"You entered %d\n"</code><code class="cpp plain">, this_is_a_number2);</code></div>
<div class="line number23 index22 alt2"><code class="cpp plain">total = this_is_a_number1 + this_is_a_number2;</code><code class="cpp comments">/* add two numbers */</code></div>
<div class="line number24 index23 alt1"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"total is %d\n"</code><code class="cpp plain">, total);</code></div>
<div class="line number25 index24 alt2"><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div>
<div class="line number26 index25 alt1"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p>
<h1><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">W5</span></span></h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">// 包含標準輸出入程式庫的標頭文件</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://blog.csdn.net/weixin_38468077/article/details/101069365</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// http://www.gnuplot.info/demo/</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://github.com/sysprog21/rv32emu</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://github.com/sysprog21/semu</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://cs61c.org/fa23/</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://greenteapress.com/wp/think-python-2e/</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://github.com/ecalvadi/c99-examples</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://github.com/gouravthakur39/beginners-C-program-examples</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://jsomers.github.io/cbook/cbook.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://jsomers.github.io/cbook/index.html</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// http://cslibrary.stanford.edu/101/EssentialC.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://publications.gbdirect.co.uk/c_book/</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// ***** 在 replit 上執行</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// CD 下載</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// cc gnuplot_ex1.c -o gnuplot_ex1</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// ./gnuplot_ex1</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;stdio.h&gt;</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// 主函式</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
int main() {</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    // 使用 popen 啟動 Gnuplot 進程</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果（！gnuplotPipe）{</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        fprintf(stderr, "無法啟動 Gnuplot。\n");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        返回1；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    }</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    // 使用Gnuplot繪圖指令，指定字型並輸出為PNG</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    fprintf(gnuplotPipe, "設定終端 png 字體 '預設,10' 大小 800,400\n");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    fprintf(gnuplotPipe, "設定輸出 './../images/gnuplot_ex1.png'\n");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    fprintf(gnuplotPipe, "繪製 sin(x)");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    // 關閉popen</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    pclose(gnuplotPipe);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    返回0；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
}</span></span></pre>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">w6</span></span></h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// 內政部國旗參考資料：https://www.moi.gov.tw/cp.aspx?n=10621</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// cc roc_flag_in_gd.c -lgd -lm 與 gd 和數學庫鏈接</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// https://www.rapidtables.com/web/color/RGB_Color.html</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// 幾何形狀著色與繪圖練習</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
// 以下 gd 繪圖方案嘗試繪製中華民國國旗，請依照以下方案內容完成後續的國旗繪圖</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;stdio.h&gt;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;gd.h&gt;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;數學.h&gt;</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
無效draw_roc_flag（gdImagePtr img）；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
int main() {</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    // 寬度 3: 高度 2</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    整數寬度=1200；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    // 國旗長寬比為3:2</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 高度 = (int)(寬度*2.0 / 3.0);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImagePtr img = gdImageCreateTrueColor(寬度, 高度);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageAlphaBlending(img, 0);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    繪製_roc_flag（img）；</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果（輸出檔== NULL）{</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        fprintf(stderr, "開啟輸出檔時發生錯誤。\n");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        返回1；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    }</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImagePngEx(img, 輸出檔, 9);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    fclose(輸出檔);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageDestroy(img);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    返回0；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
}</span></span><span></span>
<span></span>
void draw_roc_flag(gdImagePtr img) {<span></span>
    int width = gdImageSX(img);<span></span>
    int height = gdImageSY(img);<span></span>
    int red, white, blue;<span></span>
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處<span></span>
    int center_x = (int)(width/4);<span></span>
    int center_y = (int)(height/4);<span></span>
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖<span></span>
    // 由於中央白日圓形的半徑為青天寬度的 1/8<span></span>
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8<span></span>
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8<span></span>
    int sun_radius = (int)(width/8);<span></span>
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑<span></span>
    int white_circle_dia = sun_radius;<span></span>
    // 中央藍色圓形半徑為中央白日的 1又 2/15<span></span>
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;<span></span>
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值<span></span>
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色<span></span>
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色<span></span>
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色<span></span>
    // 根據畫布大小塗上紅色長方形區域<span></span>
    gdImageFilledRectangle(img, 0, 0, width, height, red);<span></span>
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色<span></span>
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);<span></span>
    // 先設法以填色畫出六個白色堆疊菱形<span></span>
    draw_white_sun(img, center_x, center_y, sun_radius, white);<span></span>
    // 利用一個藍色大圓與白色小圓畫出藍色環狀<span></span>
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);<span></span>
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);<span></span>
<span></span>
}<span></span>
<span></span>
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {<span></span>
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位<span></span>
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度<span></span>
    float deg = M_PI/180;<span></span>
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度<span></span>
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小<span></span>
    float sr = sun_radius/tan(75*deg);<span></span>
    int ax, ay, bx, by, dx, dy, ex, ey;<span></span>
    gdPoint points[4];<span></span>
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確<span></span>
    ax = center_x;<span></span>
    ay = center_y - sun_radius;<span></span>
    bx = center_x - sun_radius*tan(15*deg);<span></span>
    by = center_y;<span></span>
    ex = center_x;<span></span>
    ey = center_y + sun_radius;<span></span>
    dx = center_x + sun_radius*tan(15*deg);<span></span>
    dy = center_y;<span></span>
    // AB<span></span>
    gdImageLine(img, ax, ay, bx, by, color);<span></span>
    // BE<span></span>
    gdImageLine(img, bx, by, ex, ey, color);<span></span>
    // ED<span></span>
    gdImageLine(img, ex, ey, dx, dy, color);<span></span>
    // DA<span></span>
    gdImageLine(img, dx, dy, ax, ay, color);<span></span>
    */<span></span>
    ax = center_x;<span></span>
    ay = center_y - sun_radius;<span></span>
    bx = center_x - sun_radius*tan(15*deg);<span></span>
    by = center_y;<span></span>
    ex = center_x;<span></span>
    ey = center_y + sun_radius;<span></span>
    dx = center_x + sun_radius*tan(15*deg);<span></span>
    dy = center_y;<span></span>
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域<span></span>
    for (int i=1;i&lt;=6;i++){<span></span>
    // A<span></span>
    points[0].x = ax+sun_radius*sin(30*deg*i);<span></span>
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);<span></span>
    // B<span></span>
    points[1].x = bx+sr-sr*cos(30*deg*i);<span></span>
    points[1].y = by-sr*sin(30*deg*i);<span></span>
    // E<span></span>
    points[2].x = ex-sun_radius*sin(30*deg*i);<span></span>
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));<span></span>
    // D<span></span>
    points[3].x = dx-(sr-sr*cos(30*deg*i));<span></span>
    points[3].y = dy+sr*sin(30*deg*i);<span></span>
    // 對菱形區域範圍塗色<span></span>
    gdImageFilledPolygon(img, points, 4, color);<span></span>
    // 在菱形區域外圍畫線, 明確界定菱形範圍<span></span>
    gdImagePolygon(img, points, 4, color);<span></span>
    }<span></span>
}</pre>
<p></p>
<p></p>
<p><img alt="" height="267" src="/images/roc_flag_in_gd.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;<span></span>
#include &lt;gd.h&gt;<span></span>
#include &lt;math.h&gt;<span></span>
<span></span>
void draw_usa_flag(gdImagePtr img);<span></span>
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);<span></span>
<span></span>
int main() {<span></span>
    int width = 800;<span></span>
    int height = (int)(width / 1.9);<span></span>
<span></span>
    gdImagePtr img = gdImageCreateTrueColor(width, height);<span></span>
    gdImageAlphaBlending(img, 0);<span></span>
<span></span>
    draw_usa_flag(img);<span></span>
<span></span>
    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");<span></span>
    if (outputFile == NULL) {<span></span>
        fprintf(stderr, "打开输出文件时出错。\n");<span></span>
        return 1;<span></span>
    }<span></span>
<span></span>
    gdImagePngEx(img, outputFile, 9);<span></span>
    fclose(outputFile);<span></span>
    gdImageDestroy(img);<span></span>
<span></span>
    return 0;<span></span>
}<span></span>
<span></span>
void draw_usa_flag(gdImagePtr img) {<span></span>
    int width = gdImageSX(img);<span></span>
    int height = gdImageSY(img);<span></span>
    int red, white, blue;<span></span>
    // 国旗颜色<span></span>
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹<span></span>
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹<span></span>
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形<span></span>
<span></span>
    int stripe_height = height / 13;<span></span>
    int stripe_width = width;<span></span>
    int star_size = (int)(0.0308 * height); // 星星大小<span></span>
<span></span>
    for (int y = 0; y &lt; height; y += stripe_height) {<span></span>
        if (y / stripe_height % 2 == 0) {<span></span>
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);<span></span>
        } else {<span></span>
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);<span></span>
        }<span></span>
    }<span></span>
<span></span>
    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);<span></span>
<span></span>
    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距<span></span>
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距<span></span>
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置<span></span>
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置<span></span>
<span></span>
    for (int row = 0; row &lt; 9; row++) {<span></span>
        int starsPerRow = (row % 2 == 0) ? 6 : 5;<span></span>
<span></span>
        // 计算2、4、6和8排星星的偏移量<span></span>
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;<span></span>
<span></span>
        for (int star = 0; star &lt; starsPerRow; star++) {<span></span>
            int x = star_start_x + star * star_spacing_x + offset_x;<span></span>
<span></span>
            // 旋转角度（以弧度为单位）<span></span>
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转<span></span>
<span></span>
            int y = star_start_y + row * star_spacing_y;<span></span>
            draw_star(img, x, y, star_size, white, rotation_angle);<span></span>
        }<span></span>
    }<span></span>
}<span></span>
<span></span>
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {<span></span>
    gdPoint points[10];<span></span>
<span></span>
    for (int i = 0; i &lt; 10; i++) {<span></span>
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;<span></span>
        int radius = (i % 2 == 0) ? size : size / 2;<span></span>
        points[i].x = x + radius * cos(angle);<span></span>
        points[i].y = y + radius * sin(angle);<span></span>
    }<span></span>
<span></span>
    // 用指定的颜色填充星星<span></span>
    gdImageFilledPolygon(img, points, 10, color);<span></span>
}</pre>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;<span></span>
#include &lt;gd.h&gt;<span></span>
#include &lt;math.h&gt;<span></span>
 <span></span>
void draw_japan_flag(gdImagePtr img);<span></span>
void draw_red_sun(gdImagePtr img, int x, int y, int size, int color);<span></span>
 <span></span>
int main() {<span></span>
    int originalWidth = 1200;<span></span>
    int originalHeight = (int)(originalWidth * 2.0 / 3.0);<span></span>
    gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight);<span></span>
    gdImageAlphaBlending(img, 0);<span></span>
 <span></span>
    draw_japan_flag(img);<span></span>
 <span></span>
    // 新的宽度和高度以适应 "images" 文件夹<span></span>
    int newWidth = 600;<span></span>
    int newHeight = (int)(newWidth * 2.0 / 3.0);<span></span>
 <span></span>
    // 创建新图像并进行缩放<span></span>
    gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight);<span></span>
    gdImageAlphaBlending(resizedImage, 0);<span></span>
    gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight);<span></span>
 <span></span>
  FILE *outputFile = fopen("./../images/japan_flag.png", "wb");<span></span>
    if (outputFile == NULL) {<span></span>
        fprintf(stderr, "Error opening the output file.\n");<span></span>
        return 1;<span></span>
    }<span></span>
    gdImagePng(resizedImage, outputFile);<span></span>
    fclose(outputFile);<span></span>
    gdImageDestroy(img);<span></span>
    gdImageDestroy(resizedImage);<span></span>
 <span></span>
    return 0;<span></span>
}<span></span>
 <span></span>
void draw_japan_flag(gdImagePtr img) {<span></span>
    int width = gdImageSX(img);<span></span>
    int height = gdImageSY(img);<span></span>
 <span></span>
    // 创建一个白色背景<span></span>
    int white = gdImageColorAllocate(img, 255, 255, 255);<span></span>
    gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white);<span></span>
 <span></span>
    // 绘制红色圆圈（太阳）<span></span>
    int red = gdImageColorAllocate(img, 255, 0, 0);<span></span>
    int center_x = width / 2;<span></span>
    int center_y = height / 2;<span></span>
    int radius = (int)((width * 2) / 3);<span></span>
    draw_red_sun(img, center_x, center_y, radius, red);<span></span>
}<span></span>
 <span></span>
void draw_red_sun(gdImagePtr img, int x, int y, int size, int color) {<span></span>
  // 減小 size 的值,例如將他的值減半<span></span>
  size = size / 2;<span></span>
    gdImageArc(img, x, y, size, size, 0, 360, color);<span></span>
    gdImageFillToBorder(img, x, y, color, color);<span></span>
}<span></span>
</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<p>#include &lt;stdio.h&gt;<br/>#include &lt;gd.h&gt;<br/>#include &lt;math.h&gt;</p>
<p>void draw_chinese_flag(gdImagePtr img);</p>
<p>int main() {<br/> int width = 300; // 國旗寬度<br/> int height = 200; // 國旗高度</p>
<p>gdImagePtr im = gdImageCreateTrueColor(width, height);<br/> gdImageAlphaBlending(im, 0);</p>
<p>draw_chinese_flag(im);</p>
<p>FILE *outputFile = fopen("./../images/proc_flag.png", "wb");<br/> if (outputFile == NULL) {<br/> fprintf(stderr, "打开输出文件时出错。\n");<br/> return 1;<br/> }</p>
<p>gdImagePngEx(im, outputFile, 9);<br/> fclose(outputFile);<br/> gdImageDestroy(im);</p>
<p>return 0;<br/>}</p>
<p>// 声明 draw_star 函数<br/>void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);</p>
<p>void draw_chinese_flag(gdImagePtr img) {<br/> int width = gdImageSX(img);<br/> int height = gdImageSY(img);<br/> int red, yellow;</p>
<p>// 國旗顏色<br/> red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景<br/> yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星</p>
<p>// 畫紅色背景<br/> gdImageFilledRectangle(img, 0, 0, width, height, red);</p>
<p>// 設置星星的大小和位置<br/> int star_size = (int)(0.28 * height);<br/> int star_x = (int)(0.165 * width);<br/> int star_y = (int)(0.265 * height);</p>
<p>// 畫大星星<br/> draw_star(img, star_x, star_y, star_size, yellow, 11.0);</p>
<p>// 繪製小星星，位置根據實際國旗比例計算<br/> double radius = 0.15 * height;<br/> double angle = 360 / 7 * M_PI / 179.0;<br/> double rotation = -M_PI / 7.5;<br/> int cx = (int)(0.32 * width);<br/> int cy = (int)(0.27 * height);</p>
<p>for (int i = -1; i &lt; 3; i++) {<br/> int x = (int)(cx + radius * cos(i * angle + rotation));<br/> int y = (int)(cy + radius * sin(i * angle + rotation));<br/> draw_star(img, x, y, 19, yellow, M_PI / 5.0);<br/> }<br/>}</p>
<p>void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {<br/> gdPoint points[10];</p>
<p>// 计算星形的五个外点和五个内点<br/> double outer_radius = size / 2;<br/> double inner_radius = size / 6;<br/> double angle = M_PI / 5.0;</p>
<p>for (int i = 0; i &lt; 10; i++) {<br/> double radius = (i % 2 == 0) ? outer_radius : inner_radius;<br/> double theta = rotation_angle + i * angle;<br/> points[i].x = x + radius * cos(theta);<br/> points[i].y = y + radius * sin(theta);<br/> }</p>
<p>// 使用 gdImageFilledPolygon 绘制星形<br/> gdImageFilledPolygon(img, points, 10, color);<br/>}</p>
<img alt="" height="267" src="/images/proc_flag.png" width="400"/>
<h1>W12</h1>
<h4>#include &lt;stdio.h&gt;<br/>#include &lt;gd.h&gt;<br/>#include &lt;math.h&gt;<br/> <br/>// Declare the rotation function<br/>void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {<br/>    int i;<br/>    double angle_rad = rotation_ang * M_PI / 180.0;<br/> <br/>    for (i = 0; i &lt; num_points; i++) {<br/>        int x = points[i].x - x_orig;<br/>        int y = points[i].y - y_orig;<br/> <br/>        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));<br/>        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));<br/>    }<br/>}<br/> <br/>int main() {<br/>    int width = 800;<br/>    int height = 600;<br/> <br/>    gdImagePtr img = gdImageCreateTrueColor(width, height);<br/>    gdImageAlphaBlending(img, 0);<br/> <br/>    FILE *outputFile = fopen("hellogd1.png", "wb");<br/>    if (outputFile == NULL) {<br/>        fprintf(stderr, "Error opening the output file.\n");<br/>        return 1;<br/>    }<br/> <br/>    int red = gdImageColorAllocate(img, 255, 0, 0);<br/>    int blue = gdImageColorAllocate(img, 0, 0, 255);<br/>    int black = gdImageColorAllocate(img, 0, 0, 0);<br/>    int white = gdImageColorAllocate(img, 255, 255, 255);<br/> <br/>    gdImageFilledRectangle(img, 0, 0, width, height, white);<br/>    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);<br/> <br/>    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);<br/>    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);<br/>    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);<br/> <br/>    gdPoint points[4];<br/>    points[0].x = (int)width / 4;<br/>    points[0].y = (int)height * 3 / 4;<br/>    points[1].x = points[0].x + 100;<br/>    points[1].y = points[0].y;<br/>    points[2].x = points[1].x;<br/>    points[2].y = points[1].y + 100;<br/>    points[3].x = points[2].x - 100;<br/>    points[3].y = points[2].y;<br/> <br/>    // Call the rotation function<br/>    rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 45.0, points, 4);<br/>    gdImagePolygon(img, points, 4, black);<br/> <br/>    gdPoint points2[4];<br/>    points2[0].x = (int)width / 3;<br/>    points2[0].y = (int)height / 2;<br/>    points2[1].x = points2[0].x + 100;<br/>    points2[1].y = points2[0].y;<br/>    points2[2].x = points2[1].x;<br/>    points2[2].y = points2[1].y + 100;<br/>    points2[3].x = points2[2].x - 150;<br/>    points2[3].y = points2[2].y;<br/> <br/>    // Call the rotation function<br/>    rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);<br/>    gdImageFilledPolygon(img, points2, 4, red);<br/> <br/>    gdImagePngEx(img, outputFile, 9);<br/>    fclose(outputFile);<br/>    gdImageDestroy(img);<br/> <br/>    return 0;<br/>}</h4>
<p><img alt="" height="300" src="/images/hellogd1.png" width="400"/></p>
<h4>#include &lt;stdio.h&gt;<br/>#include &lt;gd.h&gt;<br/>#include &lt;math.h&gt;<br/> <br/>// Declare the rotation function<br/>void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {<br/>    int i;<br/>    double angle_rad = rotation_ang * M_PI / 180.0;<br/> <br/>    for (i = 0; i &lt; num_points; i++) {<br/>        int x = points[i].x - x_orig;<br/>        int y = points[i].y - y_orig;<br/> <br/>        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));<br/>        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));<br/>    }<br/>}<br/> <br/>int main() {<br/>    int width = 800;<br/>    int height = 600;<br/> <br/>    gdImagePtr img = gdImageCreateTrueColor(width, height);<br/>    gdImageAlphaBlending(img, 0);<br/> <br/>    FILE *outputFile = fopen("./../images/hellogd2.png", "wb");<br/>    if (outputFile == NULL) {<br/>        fprintf(stderr, "Error opening the output file.\n");<br/>        return 1;<br/>    }<br/> <br/>    int red = gdImageColorAllocate(img, 255, 0, 0);<br/>    int blue = gdImageColorAllocate(img, 0, 0, 255);<br/>    int black = gdImageColorAllocate(img, 0, 0, 0);<br/>    int white = gdImageColorAllocate(img, 255, 255, 255);<br/> <br/>    gdImageFilledRectangle(img, 0, 0, width, height, white);<br/>    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);<br/> <br/>    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);<br/>    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);<br/>    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);<br/> <br/>    gdPoint points[4];<br/>    points[0].x = (int)width / 4;<br/>    points[0].y = (int)height * 3 / 4;<br/>    points[1].x = points[0].x + 100;<br/>    points[1].y = points[0].y;<br/>    points[2].x = points[1].x;<br/>    points[2].y = points[1].y + 100;<br/>    points[3].x = points[2].x - 100;<br/>    points[3].y = points[2].y;<br/> <br/>    // Call the rotation function multiple times<br/>    for (int i = 0; i &lt; 4; i++) {<br/>        rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);<br/>        gdImagePolygon(img, points, 4, black);<br/>    }<br/> <br/>    gdPoint points2[4];<br/>    points2[0].x = (int)width / 3;<br/>    points2[0].y = (int)height / 2;<br/>    points2[1].x = points2[0].x + 100;<br/>    points2[1].y = points2[0].y;<br/>    points2[2].x = points2[1].x;<br/>    points2[2].y = points2[1].y + 100;<br/>    points2[3].x = points2[2].x - 150;<br/>    points2[3].y = points2[2].y;<br/> <br/>    // Call the rotation function multiple times<br/>    for (int i = 0; i &lt; 12; i++) {<br/>        //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);<br/>        rotateFilledPolygon(500, 200, 30.0, points2, 4);<br/>        gdImageFilledPolygon(img, points2, 4, red);<br/>    }<br/> <br/>    gdImagePngEx(img, outputFile, 9);<br/>    fclose(outputFile);<br/>    gdImageDestroy(img);<br/> <br/>    return 0;<br/>}</h4>
<p><img alt="" height="300" src="/images/hellogd2.png" width="400"/></p>
<h1>w13</h1>
<p>課程內容有點難理解，不懂的地方只能反覆觀看老師的教學的影片，從開學到現在目前學到最印象深刻的是利用C語言繪製國旗，繪製國旗得過程中常出現程式錯誤導致國旗的圖案發生錯誤，有時即使觀看老師的影片也不知道到底該如何解決，之後我詢問班上的同學慢慢抓到書寫程式的訣竅，最後國旗也順利地繪製出來了。</p>
<p>接下來的小組合作中，我與同組成員分享想法，討論出各種不同的解決方案，我相信與小組成員互相討論定可增進我和組員輸寫C語言的能力。</p>
<p>計算機課程豐富我的專業知識，期望接下來的課程可以學到更多新知識，我期待將學到的技能運用到未來的科技上，並且在程式設計上更進一步成長進步。</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;<span></span>
&lt;script&gt;<span></span>
window.onload=function(){<span></span>
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});<span></span>
}<span></span>
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">將 iterable 與 iterator</span></span><a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">相關說明</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，利用 Brython 與 Ace Editor 整理在此頁面。</span></span></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">檔案名稱：</span></span><input id="kw_filename" placeholder="輸入檔名" type="text"/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">.py</span></span></label> <span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="保存"/></span></span></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">跑步</span></span></button> <button id="kw_show_console1"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">輸出</span></span></button> <button id="kw_clear_console1"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">明確輸出區</span></span></button><button id="clear_bd1"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">清晰的繪圖區</span></span></button><button onclick="window.location.reload()"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">重新載入</span></span></button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從1累加到100第2部分：</span></span></p>
<p><button id="add1to100part2"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">1 加到 100</span></span></button><button id="cango_three_gears"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cango_三_齒輪</span></span></button><button id="bsnake"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">BS蛇</span></span></button><button id="aitetris"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">人工智慧俄羅斯方塊</span></span></button><button id="threejsblock"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">旋轉塊</span></span></button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">檔案名稱：</span></span><input id="kw_filename2" placeholder="輸入檔名" type="text"/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">.py</span></span></label> <span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="保存"/></span></span></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">跑步</span></span></button> <button id="kw_show_console2"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">輸出</span></span></button> <button id="kw_clear_console2"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">明確輸出區</span></span></button><button id="clear_bd2"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">清晰的繪圖區</span></span></button><button onclick="window.location.reload()"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">重新載入</span></span></button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
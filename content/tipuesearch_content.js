var tipuesearch = {"pages": [{'title': '關於', 'text': 'https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': '關於.html'}, {'title': 'About', 'text': '說明安裝 Apps, 如何設定網路, 查驗是否正確連網 \n 說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話 \n 說明如何利用 Replit 協助編輯網頁內容 \n 說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'W3', 'text': '有關電腦輔助設計室網路設定說明 \n 處理 .replit 與 replit.nix 中的舊 Python 設定問題 \n 說明如何為 site-個人github帳號 倉儲設定 Github Pages \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '各學員自行建立線上考試帳號 \n 依據 \xa0 112 學年度第一學期教師授課表 中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號. \n 各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages \n 登入 Github 後, 以\xa0 https://github.com/mdecycu/cmsite \xa0作為 Template 建立 cp2023 倉儲 \n 在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github \n 在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號 \n 利用 import 將 cp2023 倉儲導入 Replit \n 設定 .replit 為 python3 main.py \n 根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install \n 以 Run 執行 main.py 啟動倉儲內容編輯網頁 \n 利用 密碼產生程式 將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證) \n 重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github \n 在 Replit cp2023 專案中設定 C 程式與 Gnuplot 執行環境, 完成 上課內容中的練習 \n replit.nix \xa0 納入 gnuplot 套件 \n w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4 \n 設定過程使用的參考網站:\xa0 https://scrum-1.github.io/cp2023/content/w5.html \xa0 \n 設定過程使用的 Repl: \xa0 https://replit.com/@scrum1/cp2023 \xa0(包含 \xa0 replit.nix \xa0 設定檔案) \n 蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler\'s Method 數值分析相關資料 \n 將 \xa0 euler_gnuplot_msd_ex1.c \xa0放入 downloads 目錄中, 以 cc\xa0euler_gnuplot_msd_ex1.c -o euler_gnuplot_msd_ex1 產生\xa0euler_gnuplot_msd_ex1 可執行檔案後, 以 ./euler_gnuplot_msd_ex1 執行 \n 最後可以在 images 目錄中得到 \xa0 motion_plot.png \xa0 模擬結果 \n jsliu_c_programming.pdf \xa0 (需要下載密碼) \n Introduction to C \xa0(經由校園網路或 VPN 下載) \n 改由學員自行利用\xa0 https://github.com/mdecycu/cmsite \xa0倉儲作為 template, 建立名稱為 cp2023 的評分倉儲 . \n 近端執行: \n SciTE 與 Tiny C Compiler 若要設定為 Tools - Compile 之後產生可執行檔案 a.out, cpp.properties 設定檔案必須修改如下: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n \n \n \n ccopts=-pedantic -Os \n #cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o \n #ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o \n cc=tcc.exe -run  \n ccc=tcc.exe -o a.out \n \xa0 \n make.command=make \n #command.compile.*.c=$(ccc) -std=c99 \n command.compile.*.c=$(ccc) $(FileNameExt) \n command.build.*.c=$(make.command) \n command.build.*.h=$(make.command) \n command.clean.*.c=$(make.command) clean \n command.clean.*.h=$(make.command) clean \n # use tcc to run .c program \n #command.go.*.c=./$(FileName) \n command.go.*.c=$(cc) $(FileNameExt) \n \n \n \n \n \n \n \n 雲端執行: \n 範例: \xa0 https://replit.com/@wcms/cjavascriptpython \n 將位於個人 Github 帳號下的 cp2023 倉儲 (建議以 \xa0 https://github.com/mdecycu/cmsite \xa0 作為 template) import 進入 Replit, 以 git submodule update --init 取下子模組, 然後以 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝啟動編輯網站所需模組後, 將 config/config 密碼編碼移至 Secrets 頁面中的 config 變數後啟動. \n 修改 replit.nix 如下, 表示要安裝 gnuplot 套件: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n \n \n \n { pkgs }: { \n \xa0\xa0 deps = [ \n \xa0\xa0\xa0\xa0 pkgs.gnuplot \n \xa0\xa0 ]; \n } \n \n \n \n \n \n \n \n 之後將所練習的 C 程式置於 downloads 目錄中, 其執行影像結果存入 images 後, 分別在網頁中引用. \n Exercises: \n 請從\xa0 jsliu_c_programming.pdf \xa0 (需要下載密碼)與\xa0 Introduction to C \xa0(經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別: \n \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行. \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行. \n 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行. \n \n 最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在 個人 github 帳號下的 cp2023 倉儲網頁 中的 c_ex 頁面中. \n 參考: \n Introduction to the C programming Language ( 1 , \xa0 2 , \xa0 3 , or \xa0 download with password ) \n 使用者輸入兩個整數後相加的 C 程式範例: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n \n \n \n /* Read in two integers , add them and display the answer */ \n #define _CRT_SECURE_NO_WARNINGS \n #include<stdio.h> \n int   main() \n { \n int   this_is_a_number1, this_is_a_number2, total; \n printf ( "Please enter an integer number:\\n " ); \n /* read number in */ \n if   ( scanf ( "%d" , &this_is_a_number1) == 1) { \n \xa0\xa0\xa0\xa0\xa0\xa0 printf ( "%d" , this_is_a_number1); \n \xa0\xa0\xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf ( "Failed to read integer.\\n" ); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n printf ( "You entered %d\\n" , this_is_a_number1); \n printf ( "Please enter another number: \\n" ); \n if   ( scanf ( "%d" , &this_is_a_number2) == 1) { \n \xa0\xa0\xa0\xa0\xa0\xa0 printf ( "%d" , this_is_a_number1); \n \xa0\xa0\xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0\xa0\xa0 printf ( "Failed to read integer.\\n" ); \n \xa0\xa0\xa0\xa0 } \n printf ( "You entered %d\\n" , this_is_a_number2); \n total = this_is_a_number1 + this_is_a_number2; /* add two numbers */ \n printf ( "total is %d\\n" , total); \n return   0; \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '// 包含標準輸出入程式庫的標頭文件 \n// https://blog.csdn.net/weixin_38468077/article/details/101069365 \n// http://www.gnuplot.info/demo/ \n// https://github.com/sysprog21/rv32emu \n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3 \n// https://cs61c.org/fa23/ \n// https://greenteapress.com/wp/think-python-2e/ \n// https://github.com/ecalvadi/c99-examples \n// https://github.com/gouravthakur39/beginners-C-program-examples \n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples \n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf \n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf \n// https://jsomers.github.io/cbook/cbook.pdf \n// https://jsomers.github.io/cbook/index.html \n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf \n// http://cslibrary.stanford.edu/101/EssentialC.pdf \n// https://publications.gbdirect.co.uk/c_book/ \n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf \n// ***** 在 replit 上執行 \n// CD 下載 \n// cc gnuplot_ex1.c -o gnuplot_ex1 \n// ./gnuplot_ex1 \n#include <stdio.h> \n \n// 主函式 \nint main() { \n    // 使用 popen 啟動 Gnuplot 進程 \n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w"); \n    如果（！gnuplotPipe）{ \n        fprintf(stderr, "無法啟動 Gnuplot。\\n"); \n        返回1； \n    } \n \n    // 使用Gnuplot繪圖指令，指定字型並輸出為PNG \n    fprintf(gnuplotPipe, "設定終端 png 字體 \'預設,10\' 大小 800,400\\n"); \n    fprintf(gnuplotPipe, "設定輸出 \'./../images/gnuplot_ex1.png\'\\n"); \n    fprintf(gnuplotPipe, "繪製 sin(x)"); \n    // 關閉popen \n    pclose(gnuplotPipe); \n \n    返回0； \n} \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'w6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China \n// 內政部國旗參考資料：https://www.moi.gov.tw/cp.aspx?n=10621 \n// cc roc_flag_in_gd.c -lgd -lm 與 gd 和數學庫鏈接 \n// https://www.rapidtables.com/web/color/RGB_Color.html \n// 幾何形狀著色與繪圖練習 \n// 以下 gd 繪圖方案嘗試繪製中華民國國旗，請依照以下方案內容完成後續的國旗繪圖 \n#include <stdio.h> \n#include <gd.h> \n#include <數學.h> \n \n無效draw_roc_flag（gdImagePtr img）； \nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n \nint main() { \n    // 寬度 3: 高度 2 \n    整數寬度=1200； \n    // 國旗長寬比為3:2 \n    int 高度 = (int)(寬度*2.0 / 3.0); \n \n    gdImagePtr img = gdImageCreateTrueColor(寬度, 高度); \n    gdImageAlphaBlending(img, 0); \n \n    繪製_roc_flag（img）； \n \n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb"); \n    如果（輸出檔== NULL）{ \n        fprintf(stderr, "開啟輸出檔時發生錯誤。\\n"); \n        返回1； \n    } \n    gdImagePngEx(img, 輸出檔, 9); \n    fclose(輸出檔); \n    gdImageDestroy(img); \n    返回0； \n} \n \nvoid draw_roc_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red, white, blue; \n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n    int center_x = (int)(width/4); \n    int center_y = (int)(height/4); \n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n    // 由於中央白日圓形的半徑為青天寬度的 1/8 \n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n    int sun_radius = (int)(width/8); \n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n    int white_circle_dia = sun_radius; \n    // 中央藍色圓形半徑為中央白日的 1又 2/15 \n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; \n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 \n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 \n    // 根據畫布大小塗上紅色長方形區域 \n    gdImageFilledRectangle(img, 0, 0, width, height, red); \n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n    // 先設法以填色畫出六個白色堆疊菱形 \n    draw_white_sun(img, center_x, center_y, sun_radius, white); \n    // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \n} \n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) { \n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位 \n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度 \n    float deg = M_PI/180; \n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度 \n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小 \n    float sr = sun_radius/tan(75*deg); \n    int ax, ay, bx, by, dx, dy, ex, ey; \n    gdPoint points[4]; \n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確 \n    ax = center_x; \n    ay = center_y - sun_radius; \n    bx = center_x - sun_radius*tan(15*deg); \n    by = center_y; \n    ex = center_x; \n    ey = center_y + sun_radius; \n    dx = center_x + sun_radius*tan(15*deg); \n    dy = center_y; \n    // AB \n    gdImageLine(img, ax, ay, bx, by, color); \n    // BE \n    gdImageLine(img, bx, by, ex, ey, color); \n    // ED \n    gdImageLine(img, ex, ey, dx, dy, color); \n    // DA \n    gdImageLine(img, dx, dy, ax, ay, color); \n    */ \n    ax = center_x; \n    ay = center_y - sun_radius; \n    bx = center_x - sun_radius*tan(15*deg); \n    by = center_y; \n    ex = center_x; \n    ey = center_y + sun_radius; \n    dx = center_x + sun_radius*tan(15*deg); \n    dy = center_y; \n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域 \n    for (int i=1;i<=6;i++){ \n    // A \n    points[0].x = ax+sun_radius*sin(30*deg*i); \n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i); \n    // B \n    points[1].x = bx+sr-sr*cos(30*deg*i); \n    points[1].y = by-sr*sin(30*deg*i); \n    // E \n    points[2].x = ex-sun_radius*sin(30*deg*i); \n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i)); \n    // D \n    points[3].x = dx-(sr-sr*cos(30*deg*i)); \n    points[3].y = dy+sr*sin(30*deg*i); \n    // 對菱形區域範圍塗色 \n    gdImageFilledPolygon(img, points, 4, color); \n    // 在菱形區域外圍畫線, 明確界定菱形範圍 \n    gdImagePolygon(img, points, 4, color); \n    } \n} \n \n \n \n #include <stdio.h> \n#include <gd.h> \n#include <math.h> \n \nvoid draw_usa_flag(gdImagePtr img); \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n \nint main() { \n    int width = 800; \n    int height = (int)(width / 1.9); \n \n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n \n    draw_usa_flag(img); \n \n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "打开输出文件时出错。\\n"); \n        return 1; \n    } \n \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n \n    return 0; \n} \n \nvoid draw_usa_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red, white, blue; \n    // 国旗颜色 \n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹 \n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹 \n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形 \n \n    int stripe_height = height / 13; \n    int stripe_width = width; \n    int star_size = (int)(0.0308 * height); // 星星大小 \n \n    for (int y = 0; y < height; y += stripe_height) { \n        if (y / stripe_height % 2 == 0) { \n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red); \n        } else { \n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white); \n        } \n    } \n \n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue); \n \n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距 \n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距 \n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置 \n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置 \n \n    for (int row = 0; row < 9; row++) { \n        int starsPerRow = (row % 2 == 0) ? 6 : 5; \n \n        // 计算2、4、6和8排星星的偏移量 \n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n \n        for (int star = 0; star < starsPerRow; star++) { \n            int x = star_start_x + star * star_spacing_x + offset_x; \n \n            // 旋转角度（以弧度为单位） \n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转 \n \n            int y = star_start_y + row * star_spacing_y; \n            draw_star(img, x, y, star_size, white, rotation_angle); \n        } \n    } \n} \n \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) { \n    gdPoint points[10]; \n \n    for (int i = 0; i < 10; i++) { \n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle; \n        int radius = (i % 2 == 0) ? size : size / 2; \n        points[i].x = x + radius * cos(angle); \n        points[i].y = y + radius * sin(angle); \n    } \n \n    // 用指定的颜色填充星星 \n    gdImageFilledPolygon(img, points, 10, color); \n} \n \n #include <stdio.h> \n#include <gd.h> \n#include <math.h> \n  \nvoid draw_japan_flag(gdImagePtr img); \nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color); \n  \nint main() { \n    int originalWidth = 1200; \n    int originalHeight = (int)(originalWidth * 2.0 / 3.0); \n    gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight); \n    gdImageAlphaBlending(img, 0); \n  \n    draw_japan_flag(img); \n  \n    // 新的宽度和高度以适应 "images" 文件夹 \n    int newWidth = 600; \n    int newHeight = (int)(newWidth * 2.0 / 3.0); \n  \n    // 创建新图像并进行缩放 \n    gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight); \n    gdImageAlphaBlending(resizedImage, 0); \n    gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight); \n  \n  FILE *outputFile = fopen("./../images/japan_flag.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "Error opening the output file.\\n"); \n        return 1; \n    } \n    gdImagePng(resizedImage, outputFile); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    gdImageDestroy(resizedImage); \n  \n    return 0; \n} \n  \nvoid draw_japan_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n  \n    // 创建一个白色背景 \n    int white = gdImageColorAllocate(img, 255, 255, 255); \n    gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white); \n  \n    // 绘制红色圆圈（太阳） \n    int red = gdImageColorAllocate(img, 255, 0, 0); \n    int center_x = width / 2; \n    int center_y = height / 2; \n    int radius = (int)((width * 2) / 3); \n    draw_red_sun(img, center_x, center_y, radius, red); \n} \n  \nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color) { \n  // 減小 size 的值,例如將他的值減半 \n  size = size / 2; \n    gdImageArc(img, x, y, size, size, 0, 360, color); \n    gdImageFillToBorder(img, x, y, color, color); \n} \n \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_chinese_flag(gdImagePtr img); \n int main() {  int width = 300; // 國旗寬度  int height = 200; // 國旗高度 \n gdImagePtr im = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(im, 0); \n draw_chinese_flag(im); \n FILE *outputFile = fopen("./../images/proc_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(im, outputFile, 9);  fclose(outputFile);  gdImageDestroy(im); \n return 0; } \n // 声明 draw_star 函数 void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n void draw_chinese_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, yellow; \n // 國旗顏色  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景  yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星 \n // 畫紅色背景  gdImageFilledRectangle(img, 0, 0, width, height, red); \n // 設置星星的大小和位置  int star_size = (int)(0.28 * height);  int star_x = (int)(0.165 * width);  int star_y = (int)(0.265 * height); \n // 畫大星星  draw_star(img, star_x, star_y, star_size, yellow, 11.0); \n // 繪製小星星，位置根據實際國旗比例計算  double radius = 0.15 * height;  double angle = 360 / 7 * M_PI / 179.0;  double rotation = -M_PI / 7.5;  int cx = (int)(0.32 * width);  int cy = (int)(0.27 * height); \n for (int i = -1; i < 3; i++) {  int x = (int)(cx + radius * cos(i * angle + rotation));  int y = (int)(cy + radius * sin(i * angle + rotation));  draw_star(img, x, y, 19, yellow, M_PI / 5.0);  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n // 计算星形的五个外点和五个内点  double outer_radius = size / 2;  double inner_radius = size / 6;  double angle = M_PI / 5.0; \n for (int i = 0; i < 10; i++) {  double radius = (i % 2 == 0) ? outer_radius : inner_radius;  double theta = rotation_angle + i * angle;  points[i].x = x + radius * cos(theta);  points[i].y = y + radius * sin(theta);  } \n // 使用 gdImageFilledPolygon 绘制星形  gdImageFilledPolygon(img, points, 10, color); } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_uk_flag(gdImagePtr img); void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color); \n int main() { // 设置国旗的宽和高 int width = 1200; int height = width / 2; \n // 创建图像 gdImagePtr img = gdImageCreateTrueColor(width, height); gdImageAlphaBlending(img, 0); \n // 绘制英国国旗 draw_uk_flag(img); \n // 将图像保存到文件 FILE *outputFile = fopen("./../images/uk_flag.png", "wb"); if (outputFile == NULL) { fprintf(stderr, "打开输出文件时发生错误。\\n"); return 1; } gdImagePngEx(img, outputFile, 9); fclose(outputFile); gdImageDestroy(img); return 0; } \n \n void draw_uk_flag(gdImagePtr img) { int width = gdImageSX(img); int height = gdImageSY(img); \n int red, white, blue; red = gdImageColorAllocate(img, 204, 0, 0); // 红色 white = gdImageColorAllocate(img, 255, 255, 255); // 白色 blue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色 \n gdImageFilledRectangle(img, 0, 0, width, height, blue); \n int x1, y1, x2, y2, x3, y3; { int line_thickness = 100; gdImageSetThickness(img, line_thickness); \n int x1, y1, x2, y2, x3, y3; \n // 绘制白色斜线 x1 = 0; y1 = 600; x2 = 1200; y2 = 0; gdImageLine(img, x1, y1, x2, y2, white); \n x1 = 0; y1 = 0; x2 = 1200; y2 = 600; gdImageLine(img, x1, y1, x2, y2, white); } { int line_thickness = 33; gdImageSetThickness(img, line_thickness); \n // 绘制红色斜线 x1 = 566; y1 = 300; x2 = 1166; y2 = 0; gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 1233; y1 = 600; x2 = 633; y2 = 300; gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 566; y1 = 300; x2 = -33; y2 = 0; gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 600; y1 = 316.5; x2 = 0; y2 = 616.5; gdImageLine(img, x1, y1, x2, y2, red); } { int line_thickness = 33; gdImageSetThickness(img, line_thickness); \n int x1, y1, x2, y2, x3, y3; \n // 绘制 斜线 x1 = 0; y1 = 600; x2 = 1200; y2 = 0; gdImageLine(img, x1, y1, x2, y2, red ); \n x1 = 1200; y1 = 16.5; x2 = 600; y2 = 316.5; gdImageLine(img, x1, y1, x2, y2, white); \n x1 = 0; y1 = 583.5; x2 = 600; y2 = 283.5; gdImageLine(img, x1, y1, x2, y2, white); \n } \n // 绘制白色十字 int cross_width = width / 32; int cross_arm_width = width / 32; int center_x = width / 2; int center_y = height / 2; \n gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white); gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white); \n // 绘制红色十字 gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red); gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red); } \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n #define WIDTH 900 \n #define HEIGHT 600 \n #define FILENAME "south_korea_flag.png" \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 gdImagePtr im; \n \xa0\xa0\xa0\xa0 FILE   *pngout; \n \xa0\xa0\xa0\xa0 int   white, black, red, blue; \n \xa0 \n \xa0\xa0\xa0\xa0 im = gdImageCreate(WIDTH, HEIGHT); \n \xa0 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(im, 255, 255, 255); \n \xa0\xa0\xa0\xa0 black = gdImageColorAllocate(im, 0, 0, 0); \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(im, 205, 0, 0); \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(im, 0, 56, 168); \n \xa0 \n \xa0\xa0\xa0\xa0 // Background (white) \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white); \n \xa0 \n \xa0\xa0\xa0\xa0 // Blue Circle (Yin-Yang Symbol) \n \xa0\xa0\xa0\xa0 gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc); \n \xa0 \n \xa0\xa0\xa0\xa0 // Red Circle (Yin-Yang Symbol) \n \xa0\xa0\xa0\xa0 gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc); \n \xa0 \n \xa0\xa0 int   circleX = 385;\xa0\xa0\xa0  // 圓心的 X 座標 \n \xa0\xa0 int   circleY = 262.5;\xa0\xa0  // 圓心的 Y 座標 \n \xa0\xa0 int   circleRadius = 75;\xa0\xa0\xa0\xa0  \n \xa0 \n \xa0\xa0 // 繪製圓形 \n \xa0\xa0 gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red); \n \xa0 \n \xa0\xa0 int   circleX2 = 515;\xa0\xa0\xa0  // 圓心的 X 座標 \n \xa0 \n \xa0 int   circleY2 = 337.5; \n \xa0 \n \xa0\xa0 // 繪製圓形 \n \xa0\xa0 gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue); \n \xa0 \n \xa0\xa0 { \n \xa0 \n \xa0 \n \xa0\xa0 // 起點和終點位置 \n \xa0 \n \xa0\xa0 int   startX = 340;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY = 90;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX = 200;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY = 260;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black); \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black); \n \xa0 \n \xa0\xa0 int   startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY2 = 270;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY2 = 210;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +12); \n gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white); \n } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \n \xa0\xa0 int   startX = 330;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX = 190;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n \xa0 \n \xa0\xa0 int   startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +14); \n gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 232, 426, 206, 448, white); \n \xa0 \n \xa0\xa0 } \n \xa0 \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \n \xa0\xa0 int   startX = 564;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX = 704;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black); \n \xa0 \n gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 624, 400, 734, 490, white); \n \xa0 \n \xa0\xa0 int   startX2 = 553;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX2 = 633;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +30); \n gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white); \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \n \xa0\xa0 int   startX = 330;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY = 520;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX = 190;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY = 350;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n \xa0 \n \xa0\xa0 int   startX2 = 213;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY2 = 330;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX2 = 133;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY2 = 390;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth ); \n gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +14); \n gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 232, 426, 206, 448, white); \n \xa0 \n \xa0\xa0 } \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 // 起點和終點位置 \n \xa0 \n \xa0\xa0 int   startX = 564;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY = 97;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX = 704;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY = 267;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth = 23;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX, startY, endX, endY, black); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth -10); \n gdImageLine(im, 624, 212, 734, 118, white); \n \xa0 \n \xa0\xa0\xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n \xa0\xa0 gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black); \n \xa0 \n \xa0\xa0 int   startX2 = 553;\xa0\xa0\xa0  \n \xa0\xa0 // 線的起點 X 座標 \n \xa0 \n \xa0\xa0 int   startY2 = 277;\xa0\xa0  \n \xa0\xa0 // 線的起點 Y 座標 \n \xa0 \n \xa0\xa0 int   endX2 = 633;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 X 座標 \n \xa0 \n \xa0\xa0 int   endY2 = 217;\xa0\xa0\xa0\xa0  \n \xa0\xa0 // 線的終點 Y 座標 \n \xa0 \n \xa0\xa0 int   lineWidth2 = 25;\xa0  // 線的寬度 \n \xa0 \n \xa0\xa0 // 繪製線段 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +8); \n \xa0\xa0 gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth +10); \n gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white); \n \xa0 \n \xa0\xa0 gdImageSetThickness(im, lineWidth); \n gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageSetThickness(im, lineWidth +30); \n gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white); \n \xa0 \n \xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Save image \n FILE   *outputFile =  fopen ( "./../images/korea_flag.png" ,  "wb" ); \n if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0 return   1; \n } \n \xa0\xa0 gdImagePngEx(im, outputFile, 9); \n \xa0\xa0\xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0\xa0\xa0 gdImageDestroy(im); \n \xa0\xa0\xa0\xa0\xa0\xa0 return   0; \n \xa0\xa0 } \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'W12', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \xa0 // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) { \xa0\xa0\xa0\xa0int i; \xa0\xa0\xa0\xa0double angle_rad = rotation_ang * M_PI / 180.0; \xa0 \xa0\xa0\xa0\xa0for (i = 0; i < num_points; i++) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int x = points[i].x - x_orig; \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int y = points[i].y - y_orig; \xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad)); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad)); \xa0\xa0\xa0\xa0} } \xa0 int main() { \xa0\xa0\xa0\xa0int width = 800; \xa0\xa0\xa0\xa0int height = 600; \xa0 \xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(width, height); \xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0); \xa0 \xa0\xa0\xa0\xa0FILE *outputFile = fopen("hellogd1.png", "wb"); \xa0\xa0\xa0\xa0if (outputFile == NULL) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Error opening the output file.\\n"); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1; \xa0\xa0\xa0\xa0} \xa0 \xa0\xa0\xa0\xa0int red = gdImageColorAllocate(img, 255, 0, 0); \xa0\xa0\xa0\xa0int blue = gdImageColorAllocate(img, 0, 0, 255); \xa0\xa0\xa0\xa0int black = gdImageColorAllocate(img, 0, 0, 0); \xa0\xa0\xa0\xa0int white = gdImageColorAllocate(img, 255, 255, 255); \xa0 \xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width, height, white); \xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \xa0 \xa0\xa0\xa0\xa0gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red); \xa0\xa0\xa0\xa0gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red); \xa0\xa0\xa0\xa0gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \xa0 \xa0\xa0\xa0\xa0gdPoint points[4]; \xa0\xa0\xa0\xa0points[0].x = (int)width / 4; \xa0\xa0\xa0\xa0points[0].y = (int)height * 3 / 4; \xa0\xa0\xa0\xa0points[1].x = points[0].x + 100; \xa0\xa0\xa0\xa0points[1].y = points[0].y; \xa0\xa0\xa0\xa0points[2].x = points[1].x; \xa0\xa0\xa0\xa0points[2].y = points[1].y + 100; \xa0\xa0\xa0\xa0points[3].x = points[2].x - 100; \xa0\xa0\xa0\xa0points[3].y = points[2].y; \xa0 \xa0\xa0\xa0\xa0// Call the rotation function \xa0\xa0\xa0\xa0rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 45.0, points, 4); \xa0\xa0\xa0\xa0gdImagePolygon(img, points, 4, black); \xa0 \xa0\xa0\xa0\xa0gdPoint points2[4]; \xa0\xa0\xa0\xa0points2[0].x = (int)width / 3; \xa0\xa0\xa0\xa0points2[0].y = (int)height / 2; \xa0\xa0\xa0\xa0points2[1].x = points2[0].x + 100; \xa0\xa0\xa0\xa0points2[1].y = points2[0].y; \xa0\xa0\xa0\xa0points2[2].x = points2[1].x; \xa0\xa0\xa0\xa0points2[2].y = points2[1].y + 100; \xa0\xa0\xa0\xa0points2[3].x = points2[2].x - 150; \xa0\xa0\xa0\xa0points2[3].y = points2[2].y; \xa0 \xa0\xa0\xa0\xa0// Call the rotation function \xa0\xa0\xa0\xa0rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4); \xa0\xa0\xa0\xa0gdImageFilledPolygon(img, points2, 4, red); \xa0 \xa0\xa0\xa0\xa0gdImagePngEx(img, outputFile, 9); \xa0\xa0\xa0\xa0fclose(outputFile); \xa0\xa0\xa0\xa0gdImageDestroy(img); \xa0 \xa0\xa0\xa0\xa0return 0; } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \xa0 // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) { \xa0\xa0\xa0\xa0int i; \xa0\xa0\xa0\xa0double angle_rad = rotation_ang * M_PI / 180.0; \xa0 \xa0\xa0\xa0\xa0for (i = 0; i < num_points; i++) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int x = points[i].x - x_orig; \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int y = points[i].y - y_orig; \xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad)); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad)); \xa0\xa0\xa0\xa0} } \xa0 int main() { \xa0\xa0\xa0\xa0int width = 800; \xa0\xa0\xa0\xa0int height = 600; \xa0 \xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(width, height); \xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0); \xa0 \xa0\xa0\xa0\xa0FILE *outputFile = fopen("./../images/hellogd2.png", "wb"); \xa0\xa0\xa0\xa0if (outputFile == NULL) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Error opening the output file.\\n"); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1; \xa0\xa0\xa0\xa0} \xa0 \xa0\xa0\xa0\xa0int red = gdImageColorAllocate(img, 255, 0, 0); \xa0\xa0\xa0\xa0int blue = gdImageColorAllocate(img, 0, 0, 255); \xa0\xa0\xa0\xa0int black = gdImageColorAllocate(img, 0, 0, 0); \xa0\xa0\xa0\xa0int white = gdImageColorAllocate(img, 255, 255, 255); \xa0 \xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width, height, white); \xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \xa0 \xa0\xa0\xa0\xa0gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red); \xa0\xa0\xa0\xa0gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red); \xa0\xa0\xa0\xa0gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \xa0 \xa0\xa0\xa0\xa0gdPoint points[4]; \xa0\xa0\xa0\xa0points[0].x = (int)width / 4; \xa0\xa0\xa0\xa0points[0].y = (int)height * 3 / 4; \xa0\xa0\xa0\xa0points[1].x = points[0].x + 100; \xa0\xa0\xa0\xa0points[1].y = points[0].y; \xa0\xa0\xa0\xa0points[2].x = points[1].x; \xa0\xa0\xa0\xa0points[2].y = points[1].y + 100; \xa0\xa0\xa0\xa0points[3].x = points[2].x - 100; \xa0\xa0\xa0\xa0points[3].y = points[2].y; \xa0 \xa0\xa0\xa0\xa0// Call the rotation function multiple times \xa0\xa0\xa0\xa0for (int i = 0; i < 4; i++) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gdImagePolygon(img, points, 4, black); \xa0\xa0\xa0\xa0} \xa0 \xa0\xa0\xa0\xa0gdPoint points2[4]; \xa0\xa0\xa0\xa0points2[0].x = (int)width / 3; \xa0\xa0\xa0\xa0points2[0].y = (int)height / 2; \xa0\xa0\xa0\xa0points2[1].x = points2[0].x + 100; \xa0\xa0\xa0\xa0points2[1].y = points2[0].y; \xa0\xa0\xa0\xa0points2[2].x = points2[1].x; \xa0\xa0\xa0\xa0points2[2].y = points2[1].y + 100; \xa0\xa0\xa0\xa0points2[3].x = points2[2].x - 150; \xa0\xa0\xa0\xa0points2[3].y = points2[2].y; \xa0 \xa0\xa0\xa0\xa0// Call the rotation function multiple times \xa0\xa0\xa0\xa0for (int i = 0; i < 12; i++) { \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0//rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0rotateFilledPolygon(500, 200, 30.0, points2, 4); \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gdImageFilledPolygon(img, points2, 4, red); \xa0\xa0\xa0\xa0} \xa0 \xa0\xa0\xa0\xa0gdImagePngEx(img, outputFile, 9); \xa0\xa0\xa0\xa0fclose(outputFile); \xa0\xa0\xa0\xa0gdImageDestroy(img); \xa0 \xa0\xa0\xa0\xa0return 0; } \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'w13', 'text': '課程內容有點難理解，不懂的地方只能反覆觀看老師的教學的影片，從開學到現在目前學到最印象深刻的是利用C語言繪製國旗，繪製國旗得過程中常出現程式錯誤導致國旗的圖案發生錯誤，有時即使觀看老師的影片也不知道到底該如何解決，之後我詢問班上的同學慢慢抓到書寫程式的訣竅，最後國旗也順利地繪製出來了。 \n 接下來的小組合作中，我與同組成員分享想法，討論出各種不同的解決方案，我相信與小組成員互相討論定可增進我和組員輸寫C語言的能力。 \n 計算機課程豐富我的專業知識，期望接下來的課程可以學到更多新知識，我期待將學到的技能運用到未來的科技上，並且在程式設計上更進一步成長進步。 \n', 'tags': '', 'url': 'w13.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython --> \n<script> \nwindow.onload=function(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理在此頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1 加到 100 cango_三_齒輪 BS蛇 人工智慧俄羅斯方塊 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};